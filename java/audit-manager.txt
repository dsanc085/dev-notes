Inject databaseService, datasource, UserService:

    @Resource
    private DatabaseService databaseService;

    @Resource
    private DataSource dataSource;

    @Resource
    private UserService userService;

Set class:

AuditManager auditManager = new AuditManager(dataSource, userService.getLoggedInUserName(), databaseService.getMapTableNameToCsvOfColumns());

Execute:

auditManager.runSqlInsertOne(sql, paramMap, "reports_aud");

Full example with auditmanager and transaction (transactiontemplate):

package com.lessons.services;

import com.common.utilities.AuditManager;
import com.common.utilities.Constants;
import com.lessons.models.AddReportDTO;
import jakarta.annotation.Resource;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;
import org.springframework.transaction.support.TransactionTemplate;

import javax.sql.DataSource;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Service
public class ReportService {
    private static final Logger logger = LoggerFactory.getLogger(ReportService.class);

    @Resource
    private DatabaseService databaseService;

    @Resource
    private DataSource dataSource;

    @Resource
    private UserService userService;

    public void addReport(AddReportDTO addReportDTO) {
        logger.debug("Adding Report");

        TransactionTemplate tt = new TransactionTemplate();
        tt.setTransactionManager(new DataSourceTransactionManager(this.dataSource));

        tt.setTimeout(Constants.SQL_TRANSACTION_TIMEOUT_SECS);

        tt.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus status) {
                Integer newReportId = databaseService.getNextId();
                String sql = """
                        insert into reports (id, report_name, description, sourceId, priorityId, classificationId)
                        values (:id, :reportName, :description, :sourceId, :priorityId, :classificationId)
                        """;

                Map<String, Object> paramMap = new HashMap<>();
                paramMap.put("id", newReportId);
                paramMap.put("reportName", addReportDTO.getReportName());
                paramMap.put("description", addReportDTO.getDescription());
                paramMap.put("sourceId", addReportDTO.getSourceId());
                paramMap.put("priorityId", addReportDTO.getPriorityId());
                paramMap.put("classificationId", addReportDTO.getClassificationId());


                AuditManager auditManager = new AuditManager(dataSource, userService.getLoggedInUserName(), databaseService.getMapTableNameToCsvOfColumns());
                // Execute SQL Statement #1
                auditManager.runSqlInsertOne(sql, paramMap, "reports_aud");

                // Execute SQL Statement #2 to insert reports_authors records - same transaction ID
                // insertReportsAuthors(addReportDTO.getAuthors(), newReportId, auditManager);

                insertReportsAuthors2(addReportDTO.getAuthors(), newReportId, auditManager);
            }
        });

    }

    private void insertReportsAuthors2(List<Integer> aAuthors, Integer aNewReportId, AuditManager aAuditManager) {
        if ((aAuthors == null) || (aAuthors.isEmpty())) {
            return;
        }

        String sql = """
            insert into reports_authors (id, report_id, user_id)
            values
                """;

        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("reportId", aNewReportId);

        int i = 1;

        for (Integer userId : aAuthors) {
            String bindVariableName = "userId" + i;
            sql += String.format("(nextval('seq_table_ids'), :reportId, :%s),", bindVariableName);

            paramMap.put(bindVariableName, userId);
            i++;
        }

        // Removing the last comma
        sql = StringUtils.chop(sql);

        aAuditManager.runSqlInsertMany(sql, paramMap, "reports_authors_aud");
    }

//    private void insertReportsAuthors(List<Integer> aAuthors, Integer aNewReportId, AuditManager aAuditManager) {
//        if ((aAuthors == null) || (aAuthors.isEmpty())) {
//            return;
//        }
//
//        String sql = """
//            insert into reports_authors (id, report_id, user_id)
//            values (nextval('seq_table_ids'), :reportId, :userId)
//                """;
//
//        Map<String, Object> paramMap = new HashMap<>();
//        paramMap.put("reportId", aNewReportId);
//
//        for (Integer userId : aAuthors) {
//            paramMap.put("userId", userId);
//            aAuditManager.runSqlInsertOne(sql, paramMap, "reports_authors_aud");
//        }
//
//    }
}
