In Angular, a Subject is a special type of Observable from the RxJS library that allows you to:
Multicast values:
    Unlike regular Observables, which only send values to a single Observer, Subjects can multicast values to multiple Observers. This means that all subscribers to the Subject will receive the same values.
Act as both an Observer and an Observable:
    You can push values into a Subject using its next() method, and you can also subscribe to it to receive values.
Common use cases for Subjects in Angular:
Sharing data between components:
Subjects are a great way to share data between components that aren't directly related. For example, you could use a Subject to broadcast a user's login status to multiple components.
Creating custom events:
You can use Subjects to create custom events that can be emitted and subscribed to throughout your application.
Managing state:
Subjects can be used to manage the state of your application, especially when you need to share that state across multiple components.
Types of Subjects:
Subject:
The basic Subject type.
BehaviorSubject:
A Subject that maintains a current value and emits it to new subscribers immediately upon subscription.
ReplaySubject:
A Subject that stores a specified number of previously emitted values and replays them to new subscribers.
AsyncSubject:
A Subject that emits only the last value emitted by the source Observable, and only after the source Observable completes.


import { Subject } from 'rxjs';

@Component({ ... })
export class MyComponent {
  private messageSubject = new Subject<string>();

  sendMessage(message: string) {
    this.messageSubject.next(message);
  }

  getMessages(): Observable<string> {
    return this.messageSubject.asObservable();
  }
}