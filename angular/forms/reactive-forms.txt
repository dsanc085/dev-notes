TS File:
1. Import and add service formBuilder:
    constructor(private formBuilder: FormBuilder)
2. Add class variable form:
    public myForm: FormGroup;
3. Initialize variable, where first item is value of formControlName in HTML file. 2nd item in array is Validator
    this.myForm = this.formBuilder.group({
      actionType: [null, Validators.required],
      orderType:  [null, Validators.required],
      limitPrice: [null, null],
      quantity:   [null, this.validatorService.whiteSpaceValidator()],
      symbol:     [null, this.validatorService.whiteSpaceValidator()]
    });
4. Create this in the html file:
    a. <form [formGroup]="this.myForm" novalidate autocomplete="off">
    b. <mat-form-field subscriptSizing="dynamic">
            <mat-label>Label</mat-label>
            <!-- Insert proper mat field -->
            <mat-error>Message</mat-error>
       </mat-form-field>
5. For form fields:
    a. Select: <mat-select formControlName="ActionType">
                    <mat-option [value]=>Option 1</mat-option>
               </mat-select>
    b. Text Box: <input type="text" matInput />
6. To reset form, in ts file:
    a. this.myForm.reset();
7. To access form fields:
this.myForm.controls.contractPriority.setValue(102);
<pre>
  contractName: {{this.myForm.controls.contractName.value}}
  contractPriority: {{this.myForm.controls.contractPriority.value}}
  contractFundingDate: {{this.myForm.controls.contractFundingDate.value}}
  contractStartDate: {{this.myForm.controls.contractStartDate.value}}
  contractStartDateErrors: {{this.myForm.controls.contractStartDate.errors | json}}
  contractEndDate: {{this.myForm.controls.contractEndDate.value}}
  contractEndDateErrors: {{this.myForm.controls.contractEndDate.errors | json}}
</pre>
8. Form validation:
 this.myForm.markAllAsTouched();

   public constructor(private formBuilder: FormBuilder,
                      private messageService: MessageService) {

   }
   public clickSave(): void {

     // Touching all forms to show any errors
     this.myForm.markAllAsTouched();

     if (!this.myForm.valid) {
       // There are errors in form so let the user know
       return;
     }

     this.messageService.showSuccessMessage("Contract Successfully Added");

     this.myForm.reset();

   }




   How to Setup a Reactive Form
   ----------------------------


   Procedure
   ---------
    1. Inject the formBuilder service

   		constructor(private formBuilder: FormBuilder)    {  }


    2. Create a class variable that holds a FormGroup object:   myForm
   		public myForm: FormGroup


    3. Use the formBuilder to initialize the FormGroup object

   		public ngOnInit(): void {

   			 // Initialize the myForm object
   			 this.myForm = this.formBuilder.group({
   							 orderType:  [null, null],
   							 limitPrice: [null, null],
   							 quantity:   [null, null],
   			  });

   		 }



    4. Add <form> tag to your HTML
       -- This is what binds the myForm class variable to your HTML

           <form [formGroup]="this.myForm" novalidate autocomplete="off">



    5. Bind the individual form controls to the the reactive form

           <mat-select formControlName="orderType">



   	When finished, the dropdown will look like this:

   		<mat-form-field>
   			<mat-label>Select the Order Type</mat-label>

   			 <mat-select formControlName="orderType">
   			 		<mat-option [value]=1>Limit Type</mat-option>
   			 		<mat-option [value]=2>Market Type</mat-option>
   			 </mat-select>

   			 <mat-error>
   			 		The order type is required
   			 </mat-error>

   		</mat-form-field>


    6. **OPTIONAL**  Display the values of your form in real-time:

   		 <pre>
   				 this.myForm.controls.orderType.value   = {{ this.myForm.controls.orderType.value  }}
   				 this.myForm.controls.orderType.errors  = {{ this.myForm.controls.orderType.errors | json }}
   				 this.myForm.controls.limitPrice.value  = {{ this.myForm.controls.limitPrice.value  }}
   				 this.myForm.controls.limitPrice.errors = {{ this.myForm.controls.quantity.errors | json  }}
   		 </pre>

